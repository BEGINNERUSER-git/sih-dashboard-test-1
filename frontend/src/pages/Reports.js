import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { 
  DocumentArrowDownIcon, 
  DocumentTextIcon,
  TableCellsIcon,
  DocumentIcon 
} from '@heroicons/react/24/outline';
import jsPDF from 'jspdf';
import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } from 'docx';
import { saveAs } from 'file-saver';

const Reports = () => {
  const { apiRequest } = useAuth();
  const [touristId, setTouristId] = useState('');
  const [alert, setAlert] = useState('');
  const [location, setLocation] = useState('');
  const [reportType, setReportType] = useState('incident');
  const [fileFormat, setFileFormat] = useState('pdf');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState('');
  const [generatedReports, setGeneratedReports] = useState([]);

  // Generate mock data for the report
  const generateReportData = () => {
    const currentDate = new Date();
    const reportId = `RPT-${Date.now()}`;
    
    return {
      reportId,
      timestamp: currentDate.toISOString(),
      touristId: touristId || 'T-' + Math.floor(Math.random() * 1000),
      alert: alert || 'Safety Alert',
      location: location || 'Unknown Location',
      reportType,
      generatedBy: 'Admin',
      status: 'Generated',
      details: {
        riskLevel: Math.random() > 0.5 ? 'High' : 'Medium',
        recommendations: [
          'Immediate safety assessment required',
          'Contact local authorities',
          'Update tourist safety score',
          'Monitor location for 24 hours'
        ],
        aiAnalysis: 'AI analysis indicates potential safety concerns based on location and alert type.',
        followUpActions: [
          'Schedule safety briefing',
          'Assign safety officer',
          'Update incident database'
        ]
      }
    };
  };

  // Create and download file
  const downloadFile = (content, filename, type) => {
    const blob = new Blob([content], { type });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  // Generate PDF document
  const generatePDF = (data) => {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.width;
    let yPosition = 20;
    
    // Header
    pdf.setFillColor(59, 130, 246); // Blue background
    pdf.rect(10, 10, pageWidth - 20, 30, 'F');
    pdf.setTextColor(255, 255, 255); // White text
    pdf.setFontSize(18);
    pdf.text('Tourist Safety Incident Report', 15, 25);
    pdf.setFontSize(10);
    pdf.text(`Generated on ${new Date(data.timestamp).toLocaleString()}`, 15, 35);
    
    yPosition = 50;
    pdf.setTextColor(0, 0, 0); // Black text
    
    // Report Information Section
    pdf.setFontSize(14);
    pdf.setFont(undefined, 'bold');
    pdf.text('Report Information', 15, yPosition);
    yPosition += 10;
    
    pdf.setFontSize(10);
    pdf.setFont(undefined, 'normal');
    const reportInfo = [
      `Report ID: ${data.reportId}`,
      `Tourist ID: ${data.touristId}`,
      `Alert Type: ${data.alert}`,
      `Location: ${data.location}`,
      `Risk Level: ${data.details.riskLevel}`,
      `Generated By: ${data.generatedBy}`
    ];
    
    reportInfo.forEach(info => {
      pdf.text(info, 15, yPosition);
      yPosition += 8;
    });
    
    yPosition += 5;
    
    // AI Analysis Section
    pdf.setFontSize(14);
    pdf.setFont(undefined, 'bold');
    pdf.text('AI Analysis', 15, yPosition);
    yPosition += 10;
    
    pdf.setFontSize(10);
    pdf.setFont(undefined, 'normal');
    const analysisLines = pdf.splitTextToSize(data.details.aiAnalysis, pageWidth - 30);
    analysisLines.forEach(line => {
      pdf.text(line, 15, yPosition);
      yPosition += 6;
    });
    
    yPosition += 5;
    
    // Recommendations Section
    pdf.setFontSize(14);
    pdf.setFont(undefined, 'bold');
    pdf.text('Recommendations', 15, yPosition);
    yPosition += 10;
    
    pdf.setFontSize(10);
    pdf.setFont(undefined, 'normal');
    data.details.recommendations.forEach((rec, index) => {
      const recLines = pdf.splitTextToSize(`${index + 1}. ${rec}`, pageWidth - 35);
      recLines.forEach(line => {
        if (yPosition > 270) { // Check if we need a new page
          pdf.addPage();
          yPosition = 20;
        }
        pdf.text(line, 20, yPosition);
        yPosition += 6;
      });
    });
    
    yPosition += 5;
    
    // Follow-up Actions Section
    if (yPosition > 250) {
      pdf.addPage();
      yPosition = 20;
    }
    
    pdf.setFontSize(14);
    pdf.setFont(undefined, 'bold');
    pdf.text('Follow-up Actions', 15, yPosition);
    yPosition += 10;
    
    pdf.setFontSize(10);
    pdf.setFont(undefined, 'normal');
    data.details.followUpActions.forEach((action, index) => {
      const actionLines = pdf.splitTextToSize(`${index + 1}. ${action}`, pageWidth - 35);
      actionLines.forEach(line => {
        if (yPosition > 270) {
          pdf.addPage();
          yPosition = 20;
        }
        pdf.text(line, 20, yPosition);
        yPosition += 6;
      });
    });
    
    return pdf;
  };

  // Generate CSV content
  const generateCSVContent = (data) => {
    const headers = 'Report ID,Tourist ID,Alert,Location,Risk Level,Generated By,Timestamp,Status\n';
    const row = `${data.reportId},${data.touristId},"${data.alert}","${data.location}",${data.details.riskLevel},${data.generatedBy},${data.timestamp},${data.status}`;
    return headers + row;
  };

  // Generate Word document
  const generateDOC = async (data) => {
    const doc = new Document({
      sections: [{
        properties: {},
        children: [
          // Header
          new Paragraph({
            children: [
              new TextRun({
                text: "Tourist Safety Incident Report",
                bold: true,
                size: 32,
                color: "3B82F6"
              })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 300 }
          }),
          
          new Paragraph({
            children: [
              new TextRun({
                text: `Generated on ${new Date(data.timestamp).toLocaleString()}`,
                size: 20,
                color: "666666"
              })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 600 }
          }),
          
          // Report Information Section
          new Paragraph({
            children: [
              new TextRun({
                text: "Report Information",
                bold: true,
                size: 28
              })
            ],
            heading: HeadingLevel.HEADING_2,
            spacing: { before: 400, after: 200 }
          }),
          
          new Paragraph({
            children: [
              new TextRun({ text: "Report ID: ", bold: true }),
              new TextRun({ text: data.reportId })
            ],
            spacing: { after: 100 }
          }),
          
          new Paragraph({
            children: [
              new TextRun({ text: "Tourist ID: ", bold: true }),
              new TextRun({ text: data.touristId })
            ],
            spacing: { after: 100 }
          }),
          
          new Paragraph({
            children: [
              new TextRun({ text: "Alert Type: ", bold: true }),
              new TextRun({ text: data.alert })
            ],
            spacing: { after: 100 }
          }),
          
          new Paragraph({
            children: [
              new TextRun({ text: "Location: ", bold: true }),
              new TextRun({ text: data.location })
            ],
            spacing: { after: 100 }
          }),
          
          new Paragraph({
            children: [
              new TextRun({ text: "Risk Level: ", bold: true }),
              new TextRun({ text: data.details.riskLevel, color: data.details.riskLevel === 'High' ? "DC2626" : "059669" })
            ],
            spacing: { after: 100 }
          }),
          
          new Paragraph({
            children: [
              new TextRun({ text: "Generated By: ", bold: true }),
              new TextRun({ text: data.generatedBy })
            ],
            spacing: { after: 400 }
          }),
          
          // AI Analysis Section
          new Paragraph({
            children: [
              new TextRun({
                text: "AI Analysis",
                bold: true,
                size: 28
              })
            ],
            heading: HeadingLevel.HEADING_2,
            spacing: { before: 400, after: 200 }
          }),
          
          new Paragraph({
            children: [
              new TextRun({ text: data.details.aiAnalysis })
            ],
            spacing: { after: 400 }
          }),
          
          // Recommendations Section
          new Paragraph({
            children: [
              new TextRun({
                text: "Recommendations",
                bold: true,
                size: 28
              })
            ],
            heading: HeadingLevel.HEADING_2,
            spacing: { before: 400, after: 200 }
          }),
          
          ...data.details.recommendations.map((rec, index) => 
            new Paragraph({
              children: [
                new TextRun({ text: `${index + 1}. ${rec}` })
              ],
              spacing: { after: 150 }
            })
          ),
          
          // Follow-up Actions Section
          new Paragraph({
            children: [
              new TextRun({
                text: "Follow-up Actions",
                bold: true,
                size: 28
              })
            ],
            heading: HeadingLevel.HEADING_2,
            spacing: { before: 400, after: 200 }
          }),
          
          ...data.details.followUpActions.map((action, index) => 
            new Paragraph({
              children: [
                new TextRun({ text: `${index + 1}. ${action}` })
              ],
              spacing: { after: 150 }
            })
          )
        ]
      }]
    });
    
    return await Packer.toBlob(doc);
  };

  const handleGenerate = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setResult(null);

    try {
      // Generate report data
      const reportData = generateReportData();
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      let filename;
      
      switch (fileFormat) {
        case 'pdf':
          const pdf = generatePDF(reportData);
          filename = `report_${reportData.reportId}.pdf`;
          pdf.save(filename);
          break;
        case 'csv':
          const csvContent = generateCSVContent(reportData);
          filename = `report_${reportData.reportId}.csv`;
          downloadFile(csvContent, filename, 'text/csv');
          break;
        case 'doc':
          const docBlob = await generateDOC(reportData);
          filename = `report_${reportData.reportId}.docx`;
          saveAs(docBlob, filename);
          break;
        default:
          const defaultCsvContent = generateCSVContent(reportData);
          filename = `report_${reportData.reportId}.csv`;
          downloadFile(defaultCsvContent, filename, 'text/csv');
      }
      
      // Update state
      const newReport = {
        ...reportData,
        filename,
        fileFormat,
        downloadedAt: new Date().toISOString()
      };
      
      setGeneratedReports(prev => [newReport, ...prev]);
      setResult({
        message: 'Report generated and downloaded successfully!',
        reportId: reportData.reportId,
        filename,
        fileFormat: fileFormat.toUpperCase()
      });
      
    } catch (err) {
      setError('Failed to generate report: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold text-gray-900">Reports & Analytics</h2>
        <p className="text-gray-600">Generate AI-assisted incident reports</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center space-x-2 mb-4">
            <DocumentTextIcon className="h-5 w-5 text-blue-600" />
            <h3 className="text-lg font-semibold text-gray-900">Generate Report</h3>
          </div>
          <form onSubmit={handleGenerate} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Tourist ID</label>
                <input 
                  value={touristId} 
                  onChange={e => setTouristId(e.target.value)} 
                  placeholder="e.g., T-001"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Report Type</label>
                <select 
                  value={reportType} 
                  onChange={e => setReportType(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="incident">Incident Report</option>
                  <option value="safety">Safety Assessment</option>
                  <option value="analysis">Risk Analysis</option>
                  <option value="summary">Summary Report</option>
                </select>
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Alert Type</label>
              <input 
                value={alert} 
                onChange={e => setAlert(e.target.value)} 
                placeholder="e.g., High-risk location detected"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Location</label>
              <input 
                value={location} 
                onChange={e => setLocation(e.target.value)} 
                placeholder="e.g., Zone A - Tourist District"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">File Format</label>
              <div className="grid grid-cols-3 gap-2">
                <button
                  type="button"
                  onClick={() => setFileFormat('pdf')}
                  className={`flex items-center justify-center space-x-1 px-3 py-2 rounded-lg text-sm border ${
                    fileFormat === 'pdf' 
                      ? 'bg-red-50 border-red-300 text-red-700' 
                      : 'bg-gray-50 border-gray-300 text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <DocumentTextIcon className="h-4 w-4" />
                  <span>PDF</span>
                </button>
                <button
                  type="button"
                  onClick={() => setFileFormat('csv')}
                  className={`flex items-center justify-center space-x-1 px-3 py-2 rounded-lg text-sm border ${
                    fileFormat === 'csv' 
                      ? 'bg-green-50 border-green-300 text-green-700' 
                      : 'bg-gray-50 border-gray-300 text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <TableCellsIcon className="h-4 w-4" />
                  <span>CSV</span>
                </button>
                <button
                  type="button"
                  onClick={() => setFileFormat('doc')}
                  className={`flex items-center justify-center space-x-1 px-3 py-2 rounded-lg text-sm border ${
                    fileFormat === 'doc' 
                      ? 'bg-blue-50 border-blue-300 text-blue-700' 
                      : 'bg-gray-50 border-gray-300 text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <DocumentIcon className="h-4 w-4" />
                  <span>DOC</span>
                </button>
              </div>
            </div>
            
            <button 
              type="submit" 
              disabled={loading} 
              className="w-full bg-blue-600 text-white py-2.5 px-4 rounded-lg text-sm font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>Generating...</span>
                </>
              ) : (
                <>
                  <DocumentArrowDownIcon className="h-4 w-4" />
                  <span>Generate Report</span>
                </>
              )}
            </button>
          </form>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Result</h3>
          <div>
            {error && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm mb-4">
                <div className="font-medium">Report generation failed</div>
                <div className="mt-1">{error}</div>
              </div>
            )}
            
            {result ? (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center space-x-2 mb-3">
                  <div className="flex-shrink-0">
                    <DocumentArrowDownIcon className="h-5 w-5 text-green-600" />
                  </div>
                  <div className="text-sm font-medium text-green-800">
                    {result.message}
                  </div>
                </div>
                <div className="space-y-2 text-sm text-green-700">
                  <div className="flex justify-between">
                    <span className="font-medium">Report ID:</span>
                    <span className="font-mono">{result.reportId}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-medium">Filename:</span>
                    <span className="font-mono">{result.filename}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-medium">Format:</span>
                    <span className="font-semibold">{result.fileFormat}</span>
                  </div>
                </div>
              </div>
            ) : (
              <div className="text-center py-8">
                <DocumentTextIcon className="h-12 w-12 text-gray-300 mx-auto mb-3" />
                <div className="text-gray-500 text-sm">No report generated yet.</div>
                <div className="text-gray-400 text-xs mt-1">Fill out the form and click Generate Report</div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Recent Reports */}
      {generatedReports.length > 0 && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Reports</h3>
          <div className="space-y-3">
            {generatedReports.slice(0, 5).map((report, index) => (
              <div key={report.reportId} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <div className="flex-shrink-0">
                    {report.fileFormat === 'csv' ? (
                      <TableCellsIcon className="h-5 w-5 text-green-600" />
                    ) : report.fileFormat === 'doc' ? (
                      <DocumentIcon className="h-5 w-5 text-blue-600" />
                    ) : (
                      <DocumentTextIcon className="h-5 w-5 text-red-600" />
                    )}
                  </div>
                  <div>
                    <div className="text-sm font-medium text-gray-900">{report.filename}</div>
                    <div className="text-xs text-gray-500">
                      Generated {new Date(report.downloadedAt).toLocaleString()} • 
                      Tourist: {report.touristId} • 
                      {report.details.riskLevel} Risk
                    </div>
                  </div>
                </div>
                <div className="text-xs text-gray-400 uppercase font-medium">
                  {report.fileFormat}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default Reports;
