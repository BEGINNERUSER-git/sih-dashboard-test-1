import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { 
  DocumentArrowDownIcon, 
  DocumentTextIcon,
  TableCellsIcon,
  ChartBarIcon 
} from '@heroicons/react/24/outline';

const Reports = () => {
  const { apiRequest } = useAuth();
  const [touristId, setTouristId] = useState('');
  const [alert, setAlert] = useState('');
  const [location, setLocation] = useState('');
  const [reportType, setReportType] = useState('incident');
  const [fileFormat, setFileFormat] = useState('pdf');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState('');
  const [generatedReports, setGeneratedReports] = useState([]);

  // Generate mock data for the report
  const generateReportData = () => {
    const currentDate = new Date();
    const reportId = `RPT-${Date.now()}`;
    
    return {
      reportId,
      timestamp: currentDate.toISOString(),
      touristId: touristId || 'T-' + Math.floor(Math.random() * 1000),
      alert: alert || 'Safety Alert',
      location: location || 'Unknown Location',
      reportType,
      generatedBy: 'Admin',
      status: 'Generated',
      details: {
        riskLevel: Math.random() > 0.5 ? 'High' : 'Medium',
        recommendations: [
          'Immediate safety assessment required',
          'Contact local authorities',
          'Update tourist safety score',
          'Monitor location for 24 hours'
        ],
        aiAnalysis: 'AI analysis indicates potential safety concerns based on location and alert type.',
        followUpActions: [
          'Schedule safety briefing',
          'Assign safety officer',
          'Update incident database'
        ]
      }
    };
  };

  // Create and download file
  const downloadFile = (content, filename, type) => {
    const blob = new Blob([content], { type });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  // Generate PDF content (simplified HTML)
  const generatePDFContent = (data) => {
    return `
<!DOCTYPE html>
<html>
<head>
    <title>Tourist Safety Report - ${data.reportId}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #3B82F6; color: white; padding: 20px; margin-bottom: 20px; }
        .section { margin-bottom: 20px; padding: 15px; border: 1px solid #ddd; }
        .field { margin-bottom: 10px; }
        .label { font-weight: bold; }
        ul { padding-left: 20px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Tourist Safety Incident Report</h1>
        <p>Generated on ${new Date(data.timestamp).toLocaleString()}</p>
    </div>
    
    <div class="section">
        <h2>Report Information</h2>
        <div class="field"><span class="label">Report ID:</span> ${data.reportId}</div>
        <div class="field"><span class="label">Tourist ID:</span> ${data.touristId}</div>
        <div class="field"><span class="label">Alert Type:</span> ${data.alert}</div>
        <div class="field"><span class="label">Location:</span> ${data.location}</div>
        <div class="field"><span class="label">Risk Level:</span> ${data.details.riskLevel}</div>
        <div class="field"><span class="label">Generated By:</span> ${data.generatedBy}</div>
    </div>
    
    <div class="section">
        <h2>AI Analysis</h2>
        <p>${data.details.aiAnalysis}</p>
    </div>
    
    <div class="section">
        <h2>Recommendations</h2>
        <ul>
            ${data.details.recommendations.map(rec => `<li>${rec}</li>`).join('')}
        </ul>
    </div>
    
    <div class="section">
        <h2>Follow-up Actions</h2>
        <ul>
            ${data.details.followUpActions.map(action => `<li>${action}</li>`).join('')}
        </ul>
    </div>
</body>
</html>
    `;
  };

  // Generate CSV content
  const generateCSVContent = (data) => {
    const headers = 'Report ID,Tourist ID,Alert,Location,Risk Level,Generated By,Timestamp,Status\n';
    const row = `${data.reportId},${data.touristId},"${data.alert}","${data.location}",${data.details.riskLevel},${data.generatedBy},${data.timestamp},${data.status}`;
    return headers + row;
  };

  // Generate JSON content
  const generateJSONContent = (data) => {
    return JSON.stringify(data, null, 2);
  };

  const handleGenerate = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setResult(null);

    try {
      // Generate report data
      const reportData = generateReportData();
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      let content, filename, mimeType;
      
      switch (fileFormat) {
        case 'pdf':
          content = generatePDFContent(reportData);
          filename = `report_${reportData.reportId}.html`; // HTML for now, could be converted to PDF
          mimeType = 'text/html';
          break;
        case 'csv':
          content = generateCSVContent(reportData);
          filename = `report_${reportData.reportId}.csv`;
          mimeType = 'text/csv';
          break;
        case 'json':
          content = generateJSONContent(reportData);
          filename = `report_${reportData.reportId}.json`;
          mimeType = 'application/json';
          break;
        default:
          content = generateJSONContent(reportData);
          filename = `report_${reportData.reportId}.json`;
          mimeType = 'application/json';
      }
      
      // Download the file
      downloadFile(content, filename, mimeType);
      
      // Update state
      const newReport = {
        ...reportData,
        filename,
        fileFormat,
        downloadedAt: new Date().toISOString()
      };
      
      setGeneratedReports(prev => [newReport, ...prev]);
      setResult({
        message: 'Report generated and downloaded successfully!',
        reportId: reportData.reportId,
        filename,
        fileFormat: fileFormat.toUpperCase()
      });
      
    } catch (err) {
      setError('Failed to generate report: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold text-gray-900">Reports & Analytics</h2>
        <p className="text-gray-600">Generate AI-assisted incident reports</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center space-x-2 mb-4">
            <DocumentTextIcon className="h-5 w-5 text-blue-600" />
            <h3 className="text-lg font-semibold text-gray-900">Generate Report</h3>
          </div>
          <form onSubmit={handleGenerate} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Tourist ID</label>
                <input 
                  value={touristId} 
                  onChange={e => setTouristId(e.target.value)} 
                  placeholder="e.g., T-001"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Report Type</label>
                <select 
                  value={reportType} 
                  onChange={e => setReportType(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="incident">Incident Report</option>
                  <option value="safety">Safety Assessment</option>
                  <option value="analysis">Risk Analysis</option>
                  <option value="summary">Summary Report</option>
                </select>
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Alert Type</label>
              <input 
                value={alert} 
                onChange={e => setAlert(e.target.value)} 
                placeholder="e.g., High-risk location detected"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Location</label>
              <input 
                value={location} 
                onChange={e => setLocation(e.target.value)} 
                placeholder="e.g., Zone A - Tourist District"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">File Format</label>
              <div className="grid grid-cols-3 gap-2">
                <button
                  type="button"
                  onClick={() => setFileFormat('pdf')}
                  className={`flex items-center justify-center space-x-1 px-3 py-2 rounded-lg text-sm border ${
                    fileFormat === 'pdf' 
                      ? 'bg-blue-50 border-blue-300 text-blue-700' 
                      : 'bg-gray-50 border-gray-300 text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <DocumentTextIcon className="h-4 w-4" />
                  <span>HTML</span>
                </button>
                <button
                  type="button"
                  onClick={() => setFileFormat('csv')}
                  className={`flex items-center justify-center space-x-1 px-3 py-2 rounded-lg text-sm border ${
                    fileFormat === 'csv' 
                      ? 'bg-blue-50 border-blue-300 text-blue-700' 
                      : 'bg-gray-50 border-gray-300 text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <TableCellsIcon className="h-4 w-4" />
                  <span>CSV</span>
                </button>
                <button
                  type="button"
                  onClick={() => setFileFormat('json')}
                  className={`flex items-center justify-center space-x-1 px-3 py-2 rounded-lg text-sm border ${
                    fileFormat === 'json' 
                      ? 'bg-blue-50 border-blue-300 text-blue-700' 
                      : 'bg-gray-50 border-gray-300 text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <ChartBarIcon className="h-4 w-4" />
                  <span>JSON</span>
                </button>
              </div>
            </div>
            
            <button 
              type="submit" 
              disabled={loading} 
              className="w-full bg-blue-600 text-white py-2.5 px-4 rounded-lg text-sm font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>Generating...</span>
                </>
              ) : (
                <>
                  <DocumentArrowDownIcon className="h-4 w-4" />
                  <span>Generate Report</span>
                </>
              )}
            </button>
          </form>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Result</h3>
          <div>
            {error && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm mb-4">
                <div className="font-medium">Report generation failed</div>
                <div className="mt-1">{error}</div>
              </div>
            )}
            
            {result ? (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center space-x-2 mb-3">
                  <div className="flex-shrink-0">
                    <DocumentArrowDownIcon className="h-5 w-5 text-green-600" />
                  </div>
                  <div className="text-sm font-medium text-green-800">
                    {result.message}
                  </div>
                </div>
                <div className="space-y-2 text-sm text-green-700">
                  <div className="flex justify-between">
                    <span className="font-medium">Report ID:</span>
                    <span className="font-mono">{result.reportId}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-medium">Filename:</span>
                    <span className="font-mono">{result.filename}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-medium">Format:</span>
                    <span className="font-semibold">{result.fileFormat}</span>
                  </div>
                </div>
              </div>
            ) : (
              <div className="text-center py-8">
                <DocumentTextIcon className="h-12 w-12 text-gray-300 mx-auto mb-3" />
                <div className="text-gray-500 text-sm">No report generated yet.</div>
                <div className="text-gray-400 text-xs mt-1">Fill out the form and click Generate Report</div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Recent Reports */}
      {generatedReports.length > 0 && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Reports</h3>
          <div className="space-y-3">
            {generatedReports.slice(0, 5).map((report, index) => (
              <div key={report.reportId} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <div className="flex-shrink-0">
                    {report.fileFormat === 'csv' ? (
                      <TableCellsIcon className="h-5 w-5 text-green-600" />
                    ) : report.fileFormat === 'json' ? (
                      <ChartBarIcon className="h-5 w-5 text-blue-600" />
                    ) : (
                      <DocumentTextIcon className="h-5 w-5 text-red-600" />
                    )}
                  </div>
                  <div>
                    <div className="text-sm font-medium text-gray-900">{report.filename}</div>
                    <div className="text-xs text-gray-500">
                      Generated {new Date(report.downloadedAt).toLocaleString()} • 
                      Tourist: {report.touristId} • 
                      {report.details.riskLevel} Risk
                    </div>
                  </div>
                </div>
                <div className="text-xs text-gray-400 uppercase font-medium">
                  {report.fileFormat}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default Reports;
